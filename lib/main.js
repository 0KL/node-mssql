// Generated by CoffeeScript 1.6.2
/*
Data types: http://pekim.github.io/tedious/api-datatypes.html
*/


(function() {
  var Request, events, getTypeByValue, map, pool, tds;

  tds = require('tedious');

  events = require('events');

  pool = null;

  map = [];

  map.register = function(jstype, sqltype) {
    var index, item, _i, _len;

    for (index = _i = 0, _len = this.length; _i < _len; index = ++_i) {
      item = this[index];
      if (!(item.js === jstype)) {
        continue;
      }
      this.splice(index, 1);
      break;
    }
    return this.push({
      js: jstype,
      sql: sqltype
    });
  };

  map.register(String, tds.TYPES.VarChar);

  map.register(Number, tds.TYPES.Int);

  map.register(Boolean, tds.TYPES.Bit);

  map.register(Date, tds.TYPES.DateTime);

  getTypeByValue = function(value) {
    var item, _i, _len;

    if (!value) {
      return tds.TYPES.Bit;
    }
    switch (typeof value) {
      case 'string':
        return tds.TYPES.VarChar;
      case 'number':
        return tds.TYPES.BigInt;
      case 'boolean':
        return tds.TYPES.Bit;
      case 'object':
        for (_i = 0, _len = map.length; _i < _len; _i++) {
          item = map[_i];
          if (value instanceof item.js) {
            return item.sql;
          }
        }
        return tds.TYPES.VarChar;
      default:
        return tds.TYPES.VarChar;
    }
  };

  Request = (function() {
    Request.prototype.parameters = null;

    Request.prototype.verbose = false;

    function Request() {
      this.parameters = {};
    }

    Request.prototype.input = function(name, type, value) {
      /*
      		Append new input parameter to current request.
      		
      		Usage:
      		request.append name, value
      		request.append name, type, value
      */
      if (arguments.length === 1) {
        throw new Error("Invalid number of arguments. At least 2 arguments expected.");
      } else if (arguments.length === 2) {
        value = type;
        type = getTypeByValue(value);
      }
      if (!type.writeParameterData) {
        throw new Error("Data type " + type.name + " is not supported as procedure parameter. (parameter name: " + name + ")");
      }
      if (value) {
        value = value.valueOf();
      }
      return this.parameters[name] = {
        name: name,
        type: type,
        io: 1,
        value: value
      };
    };

    Request.prototype.output = function(name, type) {
      /*
      		Append new output parameter to current request.
      		
      		Usage:
      		request.append name, type
      */
      return this.parameters[name] = {
        name: name,
        type: type,
        io: 2
      };
    };

    Request.prototype.query = function(command, callback) {
      /*
      		Execute specified sql command.
      */

      var recordset,
        _this = this;

      recordset = null;
      if (!pool) {
        callback(new Error('MSSQL connection pool was not initialized!'));
        return;
      }
      return pool.requestConnection(function(err, connection) {
        var req;

        if (!err) {
          req = new tds.Request(command, function(err) {
            connection.close();
            return typeof callback === "function" ? callback(err, recordset != null ? recordset : []) : void 0;
          });
          req.on('row', function(columns) {
            var col, row, _i, _len;

            if (!recordset) {
              recordset = [];
            }
            row = {};
            for (_i = 0, _len = columns.length; _i < _len; _i++) {
              col = columns[_i];
              row[col.metadata.colName] = col.value;
            }
            return recordset.push(row);
          });
          return connection.execSql(req);
        } else {
          if (connection) {
            connection.close();
          }
          return typeof callback === "function" ? callback(err) : void 0;
        }
      });
    };

    Request.prototype.execute = function(procedure, callback) {
      /*
      		Execute stored procedure with specified parameters.
      */

      var recordset, recordsets, returnValue, started,
        _this = this;

      recordset = null;
      recordsets = [];
      returnValue = 0;
      started = Date.now();
      if (!pool) {
        callback(new Error('MSSQL connection pool was not initialized!'));
        return;
      }
      return pool.requestConnection(function(err, connection) {
        var name, param, req, _ref, _ref1;

        if (!err) {
          if (_this.verbose) {
            console.log("--- sql execute ---\nprocedure: " + procedure);
          }
          req = new tds.Request(procedure, function(err) {
            if (_this.verbose) {
              console.log("--- return value: " + returnValue + " ---");
              console.log("--- completed in " + (Date.now() - started) + "ms ---");
            }
            connection.close();
            return typeof callback === "function" ? callback(err, recordsets, returnValue) : void 0;
          });
          req.on('row', function(columns) {
            var col, row, _i, _len;

            if (!recordset) {
              recordset = [];
            }
            row = {};
            for (_i = 0, _len = columns.length; _i < _len; _i++) {
              col = columns[_i];
              row[col.metadata.colName] = col.value;
            }
            if (_this.verbose) {
              console.dir(row);
            }
            return recordset.push(row);
          });
          req.on('doneInProc', function(rowCount, more, rows) {
            recordsets.push(recordset != null ? recordset : []);
            return recordset = null;
          });
          req.on('doneProc', function(rowCount, more, returnStatus, rows) {
            return returnValue = returnStatus;
          });
          req.on('returnValue', function(parameterName, value, metadata) {
            return _this.parameters[parameterName].value = value;
          });
          _ref = _this.parameters;
          for (name in _ref) {
            param = _ref[name];
            if (!(param.io === 1)) {
              continue;
            }
            if (_this.verbose) {
              console.log("input: " + param.name + ", " + param.value);
            }
            req.addParameter(param.name, param.type, param.value);
          }
          _ref1 = _this.parameters;
          for (name in _ref1) {
            param = _ref1[name];
            if (!(param.io === 2)) {
              continue;
            }
            if (_this.verbose) {
              console.log("output: " + param.name + ", " + param.value);
            }
            req.addOutputParameter(param.name, param.type);
          }
          if (_this.verbose) {
            console.log("--- response ---");
          }
          return connection.callProcedure(req);
        } else {
          if (connection) {
            connection.close();
          }
          return typeof callback === "function" ? callback(err) : void 0;
        }
      });
    };

    return Request;

  })();

  module.exports.pool = {
    max: 10,
    min: 0,
    idleTimeoutMillis: 30000
  };

  module.exports.connection = {
    userName: '',
    password: '',
    server: ''
  };

  module.exports.init = function() {
    var ConnectionPool;

    ConnectionPool = require('tedious-connection-pool');
    return pool = new ConnectionPool(module.exports.pool, module.exports.connection);
  };

  module.exports.Request = Request;

  module.exports.TYPES = tds.TYPES;

  module.exports.map = map;

  module.exports.VARCHAR = tds.TYPES.VarChar;

  module.exports.INTEGER = module.exports.INT = tds.TYPES.Int;

  module.exports.BIGINT = tds.TYPES.BigInt;

  module.exports.BOOLEAN = module.exports.BIT = tds.TYPES.Bit;

  module.exports.FLOAT = tds.TYPES.Float;

  module.exports.DATETIME = tds.TYPES.DateTime;

}).call(this);
