// Generated by CoffeeScript 1.6.2
/*
Data types: http://pekim.github.io/tedious/api-datatypes.html
*/


(function() {
  var Request, events, getNameOfType, getTypeByValue, map, pool, tds, util;

  tds = require('tedious');

  events = require('events');

  util = require('util');

  pool = null;

  map = [];

  map.register = function(jstype, sqltype) {
    var index, item, _i, _len;

    for (index = _i = 0, _len = this.length; _i < _len; index = ++_i) {
      item = this[index];
      if (!(item.js === jstype)) {
        continue;
      }
      this.splice(index, 1);
      break;
    }
    return this.push({
      js: jstype,
      sql: sqltype
    });
  };

  map.register(String, tds.TYPES.VarChar);

  map.register(Number, tds.TYPES.Int);

  map.register(Boolean, tds.TYPES.Bit);

  map.register(Date, tds.TYPES.DateTime);

  getTypeByValue = function(value) {
    var item, _i, _len;

    if (value === null || value === void 0) {
      return tds.TYPES.VarChar;
    }
    switch (typeof value) {
      case 'string':
        return tds.TYPES.VarChar;
      case 'number':
        return tds.TYPES.BigInt;
      case 'boolean':
        return tds.TYPES.Bit;
      case 'object':
        for (_i = 0, _len = map.length; _i < _len; _i++) {
          item = map[_i];
          if (value instanceof item.js) {
            return item.sql;
          }
        }
        return tds.TYPES.VarChar;
      default:
        return tds.TYPES.VarChar;
    }
  };

  getNameOfType = function(type) {
    switch (type) {
      case tds.TYPES.VarChar:
        return 'varchar';
      case tds.TYPES.NVarChar:
        return 'nvarchar';
      case tds.TYPES.Text:
        return 'text';
      case tds.TYPES.Int:
        return 'int';
      case tds.TYPES.SmallInt:
        return 'smallint';
      case tds.TYPES.TinyInt:
        return 'tinyint';
      case tds.TYPES.BigInt:
        return 'bigint';
      case tds.TYPES.Bit:
        return 'bit';
      case tds.TYPES.Float:
        return 'float';
      case tds.TYPES.Real:
        return 'real';
      case tds.TYPES.DateTime:
        return 'datetime';
      case tds.TYPES.SmallDateTime:
        return 'smalldatetime';
      case tds.TYPES.UniqueIdentifier:
        return 'uniqueidentifier';
      default:
        return 'unknown';
    }
  };

  Request = (function() {
    Request.prototype.parameters = null;

    Request.prototype.verbose = false;

    function Request() {
      this.parameters = {};
    }

    Request.prototype.input = function(name, type, value) {
      /*
      		Append new input parameter to current request.
      		
      		Usage:
      		request.append name, value
      		request.append name, type, value
      */
      if (arguments.length === 1) {
        throw new Error("Invalid number of arguments. At least 2 arguments expected.");
      } else if (arguments.length === 2) {
        value = type;
        type = getTypeByValue(value);
      }
      if (!type.writeParameterData) {
        throw new Error("Data type " + type.name + " is not supported as procedure parameter. (parameter name: " + name + ")");
      }
      if ((value != null ? value.valueOf : void 0) && !(value instanceof Date)) {
        value = value.valueOf();
      }
      if (value === null || value === void 0) {
        value = tds.TYPES.Null;
      }
      return this.parameters[name] = {
        name: name,
        type: type,
        io: 1,
        value: value
      };
    };

    Request.prototype.output = function(name, type) {
      /*
      		Append new output parameter to current request.
      		
      		Usage:
      		request.append name, type
      */
      if (!type) {
        type = tds.TYPES.VarChar;
      }
      return this.parameters[name] = {
        name: name,
        type: type,
        io: 2
      };
    };

    Request.prototype.query = function(command, callback) {
      /*
      		Execute specified sql command.
      */

      var columns, recordset, started,
        _this = this;

      columns = {};
      recordset = null;
      started = Date.now();
      if (!pool) {
        callback(new Error('MSSQL connection pool was not initialized!'));
        return;
      }
      return pool.requestConnection(function(err, connection) {
        var req;

        if (!err) {
          if (_this.verbose) {
            console.log("---------- sql query ----------\n    query: " + command);
          }
          req = new tds.Request(command, function(err) {
            var elapsed;

            if (err && !(err instanceof Error)) {
              err = new Error(err);
            }
            if (_this.verbose) {
              if (err) {
                console.log("    error: " + err);
              }
              elapsed = Date.now() - started;
              console.log(" duration: " + elapsed + "ms");
              console.log("---------- completed ----------");
            }
            if (recordset) {
              Object.defineProperty(recordset, 'columns', {
                enumerable: false,
                value: columns
              });
            }
            connection.close();
            return typeof callback === "function" ? callback(err, recordset) : void 0;
          });
          req.on('columnMetadata', function(metadata) {
            var col, _i, _len, _results;

            _results = [];
            for (_i = 0, _len = metadata.length; _i < _len; _i++) {
              col = metadata[_i];
              _results.push(columns[col.colName] = col);
            }
            return _results;
          });
          req.on('row', function(columns) {
            var col, exi, row, _i, _len;

            if (!recordset) {
              recordset = [];
            }
            row = {};
            for (_i = 0, _len = columns.length; _i < _len; _i++) {
              col = columns[_i];
              exi = row[col.metadata.colName];
              if (exi != null) {
                if (exi instanceof Array) {
                  exi.push(col.value);
                } else {
                  row[col.metadata.colName] = [exi, col.value];
                }
              } else {
                row[col.metadata.colName] = col.value;
              }
            }
            if (_this.verbose) {
              console.log(util.inspect(row));
              console.log("---------- --------------------");
            }
            return recordset.push(row);
          });
          if (_this.verbose) {
            console.log("---------- response -----------");
          }
          return connection.execSql(req);
        } else {
          if (connection) {
            connection.close();
          }
          return typeof callback === "function" ? callback(err) : void 0;
        }
      });
    };

    Request.prototype.execute = function(procedure, callback) {
      /*
      		Execute stored procedure with specified parameters.
      */

      var columns, recordset, recordsets, returnValue, started,
        _this = this;

      columns = {};
      recordset = [];
      recordsets = [];
      returnValue = 0;
      started = Date.now();
      if (!pool) {
        callback(new Error('MSSQL connection pool was not initialized!'));
        return;
      }
      return pool.requestConnection(function(err, connection) {
        var name, param, req, _ref, _ref1;

        if (!err) {
          if (_this.verbose) {
            console.log("---------- sql execute --------\n     proc: " + procedure);
          }
          req = new tds.Request(procedure, function(err) {
            var elapsed;

            if (err && !(err instanceof Error)) {
              err = new Error(err);
            }
            if (_this.verbose) {
              if (err) {
                console.log("    error: " + err);
              }
              elapsed = Date.now() - started;
              console.log("   return: " + returnValue);
              console.log(" duration: " + elapsed + "ms");
              console.log("---------- completed ----------");
            }
            connection.close();
            return typeof callback === "function" ? callback(err, recordsets, returnValue) : void 0;
          });
          req.on('columnMetadata', function(metadata) {
            var col, _i, _len, _results;

            _results = [];
            for (_i = 0, _len = metadata.length; _i < _len; _i++) {
              col = metadata[_i];
              _results.push(columns[col.colName] = col);
            }
            return _results;
          });
          req.on('row', function(columns) {
            var col, exi, row, _i, _len;

            row = {};
            for (_i = 0, _len = columns.length; _i < _len; _i++) {
              col = columns[_i];
              exi = row[col.metadata.colName];
              if (exi != null) {
                if (exi instanceof Array) {
                  exi.push(col.value);
                } else {
                  row[col.metadata.colName] = [exi, col.value];
                }
              } else {
                row[col.metadata.colName] = col.value;
              }
            }
            if (_this.verbose) {
              console.log(util.inspect(row));
              console.log("---------- --------------------");
            }
            return recordset.push(row);
          });
          req.on('doneInProc', function(rowCount, more, rows) {
            Object.defineProperty(recordset, 'columns', {
              enumerable: false,
              value: columns
            });
            recordsets.push(recordset);
            recordset = [];
            return columns = {};
          });
          req.on('doneProc', function(rowCount, more, returnStatus, rows) {
            return returnValue = returnStatus;
          });
          req.on('returnValue', function(parameterName, value, metadata) {
            if (_this.verbose) {
              if (value === tds.TYPES.Null) {
                console.log("   output: @" + parameterName + ", null");
              } else {
                console.log("   output: @" + parameterName + ", " + (getNameOfType(_this.parameters[parameterName].type)) + ", " + value);
              }
            }
            return _this.parameters[parameterName].value = value;
          });
          _ref = _this.parameters;
          for (name in _ref) {
            param = _ref[name];
            if (!(param.io === 1)) {
              continue;
            }
            if (_this.verbose) {
              if (param.value === tds.TYPES.Null) {
                console.log("    input: @" + param.name + ", null");
              } else {
                console.log("    input: @" + param.name + ", " + (getNameOfType(param.type)) + ", " + param.value);
              }
            }
            req.addParameter(param.name, param.type, param.value);
          }
          _ref1 = _this.parameters;
          for (name in _ref1) {
            param = _ref1[name];
            if (param.io === 2) {
              req.addOutputParameter(param.name, param.type);
            }
          }
          if (_this.verbose) {
            console.log("---------- response -----------");
          }
          return connection.callProcedure(req);
        } else {
          if (connection) {
            connection.close();
          }
          return typeof callback === "function" ? callback(err) : void 0;
        }
      });
    };

    return Request;

  })();

  module.exports.pool = {
    max: 10,
    min: 0,
    idleTimeoutMillis: 30000
  };

  module.exports.connection = {
    userName: '',
    password: '',
    server: ''
  };

  module.exports.init = function() {
    var ConnectionPool;

    ConnectionPool = require('tedious-connection-pool');
    return pool = new ConnectionPool(module.exports.pool, module.exports.connection);
  };

  module.exports.Request = Request;

  module.exports.TYPES = tds.TYPES;

  module.exports.map = map;

  module.exports.VARCHAR = module.exports.VarChar = tds.TYPES.VarChar;

  module.exports.NVARCHAR = module.exports.NVarChar = tds.TYPES.NVarChar;

  module.exports.TEXT = module.exports.Text = tds.TYPES.Text;

  module.exports.INTEGER = module.exports.Integer = module.exports.INT = module.exports.Int = tds.TYPES.Int;

  module.exports.BIGINT = module.exports.BigInt = tds.TYPES.BigInt;

  module.exports.TINYINT = module.exports.TinyInt = tds.TYPES.TinyInt;

  module.exports.SMALLINT = module.exports.SmallInt = tds.TYPES.SmallInt;

  module.exports.BIT = module.exports.Bit = tds.TYPES.Bit;

  module.exports.FLOAT = module.exports.Float = tds.TYPES.Float;

  module.exports.REAL = module.exports.Real = tds.TYPES.Real;

  module.exports.DATETIME = module.exports.DateTime = tds.TYPES.DateTime;

  module.exports.SMALLDATETIME = module.exports.SmallDateTime = tds.TYPES.SmallDateTime;

  module.exports.UNIQUEIDENTIFIED = module.exports.UniqueIdentifier = tds.TYPES.UniqueIdentifier;

}).call(this);
