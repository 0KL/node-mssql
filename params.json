{"name":"node-mssql","tagline":"An easy-to-use MSSQL database connector for Node.js.","body":"# node-mssql [![Dependency Status](https://david-dm.org/patriksimek/node-mssql.png)](https://david-dm.org/patriksimek/node-mssql) [![NPM version](https://badge.fury.io/js/mssql.png)](http://badge.fury.io/js/mssql)\r\n\r\nAn easy-to-use MSSQL database connector for Node.js.\r\n\r\nThere are some TDS modules which offer functionality to communicate with MSSQL databases but none of them does offer enough comfort - implementation takes a lot of lines of code. So I decided to create this module, that make work as easy as it could without loosing any important functionality. node-mssql uses other TDS modules as drivers and offer easy to use unified interface. It also add some extra features and bug fixes.\r\n\r\nThere is also [co](https://github.com/visionmedia/co) warpper available - [co-mssql](https://github.com/patriksimek/co-mssql).\r\n\r\n**Extra features:**\r\n- Unified interface for multiple MSSQL modules\r\n- Connection pooling with Transactions support\r\n- Parametrized Stored Procedures in [node-tds](https://github.com/cretz/node-tds) and [Microsoft Driver for Node.js for SQL Server](https://github.com/WindowsAzure/node-sqlserver)\r\n- Injects original TDS modules with enhancements and bug fixes\r\n\r\nAt the moment it support three TDS modules:\r\n- [Tedious](https://github.com/pekim/tedious) by Mike D Pilsbury (pure javascript - windows/osx/linux)\r\n- [Microsoft Driver for Node.js for SQL Server](https://github.com/WindowsAzure/node-sqlserver) by Microsoft Corporation (native - windows only)\r\n- [node-tds](https://github.com/cretz/node-tds) by Chad Retz (pure javascript - windows/osx/linux)\r\n\r\n## What's new in 0.5.0\r\n\r\n- You can now attach event listeners to `Connection` (`connect`, `close`), `Transaction` (`begin`, `commit`, `rollback`) and `Request` (`row`, `recordset`, `done`)\r\n- You can now set length of Char, NChar and Binary output parameters\r\n- You can now change default transaction isolation level\r\n- Errors are now splitted to three categories for better error handling - `ConnectionError`, `TransactionError`, `ReqestError`\r\n- New features and bug fixes for [Tedious](https://github.com/pekim/tedious)\r\n    - Binary and VarBinary types are now available as input and output parameters\r\n    - Image type is now available as input parameter\r\n    - Binary, VarBinary and Image types are now returned as buffer (was array)\r\n    - Transaction isolationLevel default is now `READ_COMMITED` (was `READ_UNCOMMITED`)\r\n    - Fixed issue when zero value was casted as null when using BigInt as input parameter\r\n    - Fixed issue when dates before 1900/01/01 in input parameters resulted in \"Out of bounds\" error\r\n- New features and bug fixes for [node-tds](https://github.com/cretz/node-tds)\r\n    - UniqueIdentifier type in now available as input and output parameter\r\n    - UniqueIdentifier type is now parsed correctly as string value (was buffer)\r\n    - Text, NText, Char, NChar, VarChar and NVarChar input parameters has correct lengths\r\n    - Fixed `Error` messages\r\n- New features and bug fixes for [Microsoft Driver for Node.js for SQL Server](https://github.com/WindowsAzure/node-sqlserver)\r\n    - Char, NChar, Xml, Text, NText and VarBinary types are now correctly functional as output parameters\r\n\r\n## Installation\r\n\r\n    npm install mssql\r\n\r\n## Quick Example\r\n\r\n```javascript\r\nvar sql = require('mssql'); \r\n\r\nvar config = {\r\n    user: '...',\r\n    password: '...',\r\n    server: 'localhost',\r\n    database: '...'\r\n}\r\n\r\nvar connection = new sql.Connection(config, function(err) {\r\n    // ... error checks\r\n    \r\n    // Query\r\n\t\r\n    var request = new sql.Request(connection); // or: var request = connection.request();\r\n    request.query('select 1 as number', function(err, recordset) {\r\n        // ... error checks\r\n        \r\n        console.dir(recordset);\r\n    });\r\n\t\r\n    // Stored Procedure\r\n\t\r\n    var request = new sql.Request(connection);\r\n    request.input('input_parameter', sql.Int, 10);\r\n    request.output('output_parameter', sql.Int);\r\n    request.execute('procedure_name', function(err, recordsets, returnValue) {\r\n        // ... error checks\r\n        \r\n        console.dir(recordsets);\r\n    });\r\n\t\r\n});\r\n```\r\n\r\n## Quick Example with one global connection\r\n\r\n```javascript\r\nvar sql = require('mssql'); \r\n\r\nvar config = {\r\n    user: '...',\r\n    password: '...',\r\n    server: 'localhost',\r\n    database: '...'\r\n}\r\n\r\nsql.connect(config, function(err) {\r\n    // ... error checks\r\n\t\r\n    // Query\r\n\t\r\n    var request = new sql.Request();\r\n    request.query('select 1 as number', function(err, recordset) {\r\n        // ... error checks\r\n    \t\r\n        console.dir(recordset);\r\n    });\r\n\t\r\n    // Stored Procedure\r\n\t\r\n    var request = new sql.Request();\r\n    request.input('input_parameter', sql.Int, value);\r\n    request.output('output_parameter', sql.Int);\r\n    request.execute('procedure_name', function(err, recordsets, returnValue) {\r\n        // ... error checks\r\n    \t\r\n        console.dir(recordsets);\r\n    });\r\n\t\r\n});\r\n```\r\n\r\n## Documentation\r\n\r\n### Configuration\r\n\r\n* [Basic](#cfg-basic)\r\n* [Tedious](#cfg-tedious)\r\n* [Microsoft Driver for Node.js for SQL Server](#cfg-msnodesql)\r\n* [node-tds](#cfg-node-tds)\r\n\r\n### Connections\r\n\r\n* [Connection](#connection)\r\n* [connect](#connect)\r\n* [close](#close)\r\n\r\n### Requests\r\n\r\n* [Request](#request)\r\n* [execute](#execute)\r\n* [input](#input)\r\n* [output](#output)\r\n* [query](#query)\r\n\r\n### Transactions\r\n\r\n* [Transaction](#transaction)\r\n* [begin](#begin)\r\n* [commit](#commit)\r\n* [rollback](#rollback)\r\n\r\n### Other\r\n\r\n* [Errors](#errors)\r\n* [Metadata](#meta)\r\n* [Data Types](#data-types)\r\n* [Verbose Mode](#verbose)\r\n* [Known issues](#issues)\r\n\r\n## Configuration\r\n\r\n```javascript\r\nvar config = {\r\n    user: '...',\r\n    password: '...',\r\n    server: 'localhost',\r\n    database: '...',\r\n    pool: {\r\n        max: 10,\r\n        min: 0,\r\n        idleTimeoutMillis: 30000\r\n    }\r\n}\r\n```\r\n\r\n<a name=\"cfg-basic\" />\r\n### Basic configuration is same for all drivers.\r\n\r\n- **driver** - Driver to use (default: `tedious`). Possible values: `tedious` or `msnodesql`.\r\n- **user** - User name to use for authentication.\r\n- **password** - Password to use for authentication.\r\n- **server** - Hostname to connect to.\r\n- **port** - Port to connect to (default: `1433`).\r\n- **database** - Database to connect to (default: dependent on server configuration).\r\n- **timeout** - Connection timeout in ms (default: 15000).\r\n- **pool.max** - The maximum number of connections there can be in the pool (default: `10`).\r\n- **pool.min** - The minimun of connections there can be in the pool (default: `0`).\r\n- **pool.idleTimeoutMillis** - The Number of milliseconds before closing an unused connection (default: `30000`).\r\n\r\n<a name=\"cfg-tedious\" />\r\n### Tedious\r\n\r\n- **options** - Object of Tedious specific options. More information: http://pekim.github.io/tedious/api-connection.html\r\n\r\n__This module update Tedious driver with some extra features and bug fixes by overriding some of its internal functions. If you want to disable this, require module with `var sql = require('mssql/nofix')`.__\r\n\r\n<a name=\"cfg-msnodesql\" />\r\n### Microsoft Driver for Node.js for SQL Server\r\n\r\nThis driver is not part of the default package and must be installed separately by 'npm install msnodesql'. If you are looking for compiled binaries, see [node-sqlserver-binary](https://github.com/jorgeazevedo/node-sqlserver-binary).\r\n\r\n- **connectionString** - Connection string (default: see below).\r\n\r\n```\r\nDriver={SQL Server Native Client 11.0};Server=#{server},#{port};Database=#{database};Uid=#{user};Pwd=#{password};Connection Timeout=#{timeout};\r\n```\r\n\r\n<a name=\"cfg-node-tds\" />\r\n### node-tds\r\n\r\nThis driver is not part of the default package and must be installed separately by 'npm install tds'.\r\n\r\n__This module update node-tds driver with some extra features and bug fixes by overriding some of its internal functions. If you want to disable this, require module with `var sql = require('mssql/nofix')`.__\r\n\r\n<a name=\"connection\" />\r\n## Connections\r\n\r\n```javascript\r\nvar connection = new sql.Connection({ /* config */ });\r\n```\r\n\r\n### Events\r\n\r\n- **connect** - Dispatched after connection has established.\r\n- **close** - Dispatched after connection has closed a pool (by calling `close`).\r\n\r\n---------------------------------------\r\n\r\n<a name=\"connect\" />\r\n### connect([callback])\r\n\r\nCreate connection to the server.\r\n\r\n__Arguments__\r\n\r\n- **callback(err)** - A callback which is called after connection has established, or an error has occurred. Optional.\r\n\r\n__Example__\r\n\r\n```javascript\r\nvar connection = new sql.Connection({\r\n    user: '...',\r\n    password: '...',\r\n    server: 'localhost',\r\n    database: '...'\r\n});\r\n\r\nconnection.connect(function(err) {\r\n    // ...\r\n});\r\n```\r\n\r\n---------------------------------------\r\n\r\n<a name=\"close\" />\r\n### close()\r\n\r\nClose connection to the server.\r\n\r\n__Example__\r\n\r\n```javascript\r\nconnection.close();\r\n```\r\n\r\n<a name=\"request\" />\r\n## Requests\r\n\r\n```javascript\r\nvar request = new sql.Request(/* [connection] */);\r\n```\r\n\r\nIf you ommit connection argument, global connection is used instead.\r\n\r\n### Events\r\n\r\n- **recordset(recordset)** - Dispatched when new recordset is parsed (and all its rows).\r\n- **row(row)** - Dispatched when new row is parsed.\r\n- **done(err, recordsets)** - Dispatched when request is complete.\r\n\r\n---------------------------------------\r\n\r\n<a name=\"execute\" />\r\n### execute(procedure, [callback])\r\n\r\nCall a stored procedure.\r\n\r\n__Arguments__\r\n\r\n- **procedure** - Name of the stored procedure to be executed.\r\n- **callback(err, recordsets, returnValue)** - A callback which is called after execution has completed, or an error has occurred. `returnValue` is also accessible as property of recordsets.\r\n\r\n__Example__\r\n\r\n```javascript\r\nvar request = new sql.Request();\r\nrequest.input('input_parameter', sql.Int, value);\r\nrequest.output('output_parameter', sql.Int);\r\nrequest.execute('procedure_name', function(err, recordsets, returnValue) {\r\n    // ... error checks\r\n    \r\n    console.log(recordsets.length); // count of recordsets returned by the procedure\r\n    console.log(recordsets[0].length); // count of rows contained in first recordset\r\n    console.log(returnValue); // procedure return value\r\n    console.log(recordsets.returnValue); // same as previous line\r\n\t\r\n    console.log(request.parameters.output_parameter.value); // output value\r\n\t\r\n    // ...\r\n});\r\n```\r\n\r\n---------------------------------------\r\n\r\n<a name=\"input\" />\r\n### input(name, [type], value)\r\n\r\nAdd an input parameter to the request.\r\n\r\n__Arguments__\r\n\r\n- **name** - Name of the input parameter without @ char.\r\n- **type** - SQL data type of input parameter. If you omit type, module automaticaly decide which SQL data type should be used based on JS data type.\r\n- **value** - Input parameter value. `undefined` ans `NaN` values are automatically converted to `null` values.\r\n\r\n__Example__\r\n\r\n```javascript\r\nrequest.input('input_parameter', value);\r\nrequest.input('input_parameter', sql.Int, value);\r\n```\r\n\r\n__JS Data Type To SQL Data Type Map__\r\n\r\n- `String` -> `sql.VarChar`\r\n- `Number` -> `sql.Int`\r\n- `Boolean` -> `sql.Bit`\r\n- `Date` -> `sql.DateTime`\r\n\r\nDefault data type for unknown object is `sql.VarChar`.\r\n\r\nYou can define you own type map.\r\n\r\n```javascript\r\nsql.map.register(MyClass, sql.Text);\r\n```\r\n\r\nYou can also overwrite default type map.\r\n\r\n```javascript\r\nsql.map.register(Number, sql.BigInt);\r\n```\r\n\r\n---------------------------------------\r\n\r\n<a name=\"output\" />\r\n### output(name, type, [length])\r\n\r\nAdd an output parameter to the request.\r\n\r\n__Arguments__\r\n\r\n- **name** - Name of the output parameter without @ char.\r\n- **type** - SQL data type of output parameter.\r\n- **length** - Expected length (for Char, Binary). Optional.\r\n\r\n__Example__\r\n\r\n```javascript\r\nrequest.output('output_parameter', sql.Int);\r\nrequest.output('output_parameter', sql.Char, 50);\r\n```\r\n\r\n---------------------------------------\r\n\r\n<a name=\"query\" />\r\n### query(command, [callback])\r\n\r\nExecute the SQL command.\r\n\r\n__Arguments__\r\n\r\n- **command** - T-SQL command to be executed.\r\n- **callback(err, recordset)** - A callback which is called after execution has completed, or an error has occurred.\r\n\r\n__Example__\r\n\r\n```javascript\r\nvar request = new sql.Request();\r\nrequest.query('select 1 as number', function(err, recordset) {\r\n    // ... error checks\r\n    \r\n    console.log(recordset[0].number); // return 1\r\n\t\r\n    // ...\r\n});\r\n```\r\n\r\nYou can enable multiple recordsets in querries by `request.multiple = true` command.\r\n\r\n```javascript\r\nvar request = new sql.Request();\r\nrequest.multiple = true;\r\n\r\nrequest.query('select 1 as number; select 2 as number', function(err, recordsets) {\r\n    // ... error checks\r\n    \r\n    console.log(recordsets[0][0].number); // return 1\r\n    console.log(recordsets[1][0].number); // return 2\r\n});\r\n```\r\n\r\n<a name=\"transaction\" />\r\n## Transactions\r\n\r\n**Important:** always use `Transaction` class to create transactions - it ensures that all your requests are executed on one connection. Once you call `begin`, a single connection is aquired from the connection pool and all subsequent requests (initialized with the `Transaction` object) are executed exclusively on this connection. After you call `commit` or `rollback`, connection is then released back to the connection pool.\r\n\r\n```javascript\r\nvar transaction = new sql.Transaction(/* [connection] */);\r\n```\r\n\r\nIf you ommit connection argument, global connection is used instead.\r\n\r\n__Example__\r\n\r\n```javascript\r\nvar transaction = new sql.Transaction(/* [connection] */);\r\ntransaction.begin(function(err) {\r\n    // ... error checks\r\n\r\n    var request = new sql.Request(transaction);\r\n    request.query('insert into mytable (mycolumn) values (12345)', function(err, recordset) {\r\n        // ... error checks\r\n\r\n        transaction.commit(function(err, recordset) {\r\n            // ... error checks\r\n            \r\n            console.log(\"Transaction commited.\");\r\n        });\r\n    });\r\n});\r\n```\r\n\r\nTransaction can also be created by `var transaction = connection.transaction();`. Requests can also be created by `var request = transaction.request();`.\r\n\r\n### Events\r\n\r\n- **begin** - Dispatched when transaction begin.\r\n- **commit** - Dispatched on successful commit.\r\n- **rollback** - Dispatched on successful rollback.\r\n\r\n---------------------------------------\r\n\r\n<a name=\"begin\" />\r\n### begin([isolationLevel], [callback])\r\n\r\nBegin a transaction.\r\n\r\n__Arguments__\r\n\r\n- **isolationLevel** - Controls the locking and row versioning behavior of TSQL statements issued by a connection. Optional. `READ_COMMITTED` by default. For possible values see `sql.ISOLATION_LEVEL`.\r\n- **callback(err)** - A callback which is called after transaction has began, or an error has occurred. Optional.\r\n\r\n__Example__\r\n\r\n```javascript\r\nvar transaction = new sql.Transaction();\r\ntransaction.begin(function(err) {\r\n    // ...\r\n});\r\n```\r\n\r\n---------------------------------------\r\n\r\n<a name=\"commit\" />\r\n### commit([callback])\r\n\r\nCommit a transaction.\r\n\r\n__Arguments__\r\n\r\n- **callback(err)** - A callback which is called after transaction has commited, or an error has occurred. Optional.\r\n\r\n__Example__\r\n\r\n```javascript\r\nvar transaction = new sql.Transaction();\r\ntransaction.begin(function(err) {\r\n    // ...\r\n    \r\n    transaction.commit(function(err) {\r\n        //...\r\n    })\r\n});\r\n```\r\n\r\n---------------------------------------\r\n\r\n<a name=\"rollback\" />\r\n### rollback([callback])\r\n\r\nRollback a transaction.\r\n\r\n__Arguments__\r\n\r\n- **callback(err)** - A callback which is called after transaction has rolled back, or an error has occurred. Optional.\r\n\r\n__Example__\r\n\r\n```javascript\r\nvar transaction = new sql.Transaction();\r\ntransaction.begin(function(err) {\r\n    // ...\r\n    \r\n    transaction.rollback(function(err) {\r\n        //...\r\n    })\r\n});\r\n```\r\n\r\n<a name=\"data-types\" />\r\n## Errors\r\n\r\nThere are three type of errors you can handle:\r\n\r\n- **ConnectionError** - Errors related to connections and connection pool.\r\n- **TransactionError** - Errors related to creating, commiting and rolling back transactions.\r\n- **RequestError** - Errors related to queries and stored procedures execution.\r\n\r\nThose errors are initialized in node-mssql module and it's stack can be cropped. You can always access original error with `err.originalError`.\r\n\r\n<a name=\"data-types\" />\r\n## Metadata\r\n\r\nRecordset metadata are accessible trough `recordset.columns` property.\r\n\r\n```javascript\r\nvar request = new sql.Request();\r\nrequest.query('select 1 as first, \\'asdf\\' as second', function(err, recordset) {\r\n    console.dir(recordset.columns);\r\n\t\r\n    console.log(recordset.columns.first.type === sql.Int); // true\r\n    console.log(recordset.columns.second.type === sql.VarChar); // true\r\n});\r\n```\r\n\r\nColumns structure for example above:\r\n\r\n```\r\n{ first: { name: 'first', size: 10, type: { name: 'int' } },\r\n  second: { name: 'second', size: 4, type: { name: 'varchar' } } }\r\n```\r\n\r\n<a name=\"data-types\" />\r\n## Data Types\r\n\r\n```\r\nsql.Bit\r\nsql.BigInt\r\nsql.Decimal\r\nsql.Float\r\nsql.Int\r\nsql.Money\r\nsql.Numeric\r\nsql.SmallInt\r\nsql.SmallMoney\r\nsql.Real\r\nsql.TinyInt\r\n\r\nsql.Char\r\nsql.NChar\r\nsql.Text\r\nsql.NText\r\nsql.VarChar\r\nsql.NVarChar\r\nsql.Xml\r\n\r\nsql.Date\r\nsql.DateTime\r\nsql.DateTimeOffset\r\nsql.SmallDateTime\r\n\r\nsql.UniqueIdentifier\r\n\r\nsql.Binary\r\nsql.VarBinary\r\nsql.Image\r\n```\r\n\r\n<a name=\"verbose\" />\r\n## Verbose Mode\r\n\r\nYou can enable verbose mode by `request.verbose = true` command.\r\n\r\n```javascript\r\nvar request = new sql.Request();\r\nrequest.verbose = true;\r\nrequest.input('username', 'patriksimek');\r\nrequest.input('password', 'dontuseplaintextpassword');\r\nrequest.input('attempts', 2);\r\nrequest.execute('my_stored_procedure');\r\n```\r\n\r\nOutput for example above could look similar to this.\r\n\r\n```\r\n---------- sql execute --------\r\n     proc: my_stored_procedure\r\n    input: @username, varchar, patriksimek\r\n    input: @password, varchar, dontuseplaintextpassword\r\n    input: @attempts, bigint, 2\r\n---------- response -----------\r\n{ id: 1,\r\n  username: 'patriksimek',\r\n  password: 'dontuseplaintextpassword',\r\n  email: null,\r\n  language: 'en',\r\n  attempts: 2 }\r\n---------- --------------------\r\n   return: 0\r\n duration: 5ms\r\n---------- completed ----------\r\n```\r\n\r\n<a name=\"issues\" />\r\n## Known issues\r\n\r\n### Tedious\r\n\r\n- If you're facing problems with text codepage, try using NVarChar as default data type for string values - `sql.map.register(String, sql.NVarChar)`.\r\n\r\n### node-tds\r\n\r\n- If you're facing problems with date, try changing your tsql language `set language 'English';`.\r\n- node-tds 0.1.0 contains bug and return same value for columns with same name.\r\n- node-tds 0.1.0 doesn't support codepage of input parameters.\r\n- node-tds 0.1.0 contains bug in selects that doesn't return any values *(select @param = 'value')*.\r\n- node-tds 0.1.0 doesn't support Binary, VarBinary and Image as parameters.\r\n\r\n<a name=\"license\" />\r\n## License\r\n\r\nCopyright (c) 2013-2014 Patrik Simek\r\n\r\nThe MIT License\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}